# Generated by Django 2.0.2 on 2018-02-21 05:34

import ckeditor.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Analytics',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='AutoCorrectWordList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('word', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name_plural': 'dev - Autocorrect Word List',
                'verbose_name': 'dev - Autocorrect Word List',
            },
        ),
        migrations.CreateModel(
            name='Channel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='web', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='ChannelSentences',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'verbose_name_plural': 'dev - Channel Sentences',
                'ordering': ('-pk',),
                'verbose_name': 'dev - Channel Sentences',
            },
        ),
        migrations.CreateModel(
            name='Config',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_not_recognized', models.TextField(default="I'm sorry, you can ask me things like...")),
                ('recommended_queries_statement', models.TextField(default="I'm sorry, did you wish to mean")),
                ('entry_not_present_in_database', models.TextField(default='Sorry, we could not find the corresponding entry in the records.')),
                ('cancel_button_message', models.TextField(default='Hello, what would you like to know about?')),
                ('custom_stop_word', models.TextField(default='tell,what,is')),
                ('email_id', models.TextField(default='harshdalal442@gmail.com')),
                ('initial_message', models.TextField(default='harshdalal442@gmail.com')),
                ('base_response_1', models.TextField(blank=True, default='harshdalal442@gmail.com', null=True)),
                ('base_response_2', models.TextField(blank=True, default='harshdalal442@gmail.com', null=True)),
                ('base_response_3', models.TextField(blank=True, default='harshdalal442@gmail.com', null=True)),
                ('base_response_4', models.TextField(blank=True, default='harshdalal442@gmail.com', null=True)),
                ('base_response_5', models.TextField(blank=True, default='harshdalal442@gmail.com', null=True)),
                ('entities_enable', models.BooleanField(default=False)),
                ('intents_enabled', models.BooleanField(default=False)),
                ('entities_group_enabled', models.BooleanField(default=False)),
                ('question_entities_group_enabled', models.BooleanField(default=False)),
                ('trees_enabled', models.BooleanField(default=False)),
                ('word_mappers_enabled', models.BooleanField(default=False)),
                ('mappers_enabled', models.BooleanField(default=False)),
                ('sentences_enabled', models.BooleanField(default=False)),
                ('good_words_enabled', models.BooleanField(default=False)),
                ('bigrams_enabled', models.BooleanField(default=False)),
                ('parent_sentences_enabled', models.BooleanField(default=False)),
                ('profile_enabled', models.BooleanField(default=False)),
                ('query_cnt_enabled', models.BooleanField(default=False)),
                ('variables_enabled', models.BooleanField(default=False)),
                ('knowledgebase_enabled', models.BooleanField(default=False)),
                ('feedback_general_enabled', models.BooleanField(default=False)),
                ('query_enabled', models.BooleanField(default=False)),
                ('analytics_cnt_enabled', models.BooleanField(default=False)),
                ('is_typable_data', models.BooleanField(default=False)),
                ('query_list_enabled', models.BooleanField(default=False)),
                ('feedback_query_enabled', models.BooleanField(default=False)),
                ('config_enabled', models.BooleanField(default=False)),
                ('knowledgebase2_enabled', models.BooleanField(default=False)),
                ('pc_id_enabled', models.BooleanField(default=False)),
                ('value_extracter_enabled', models.BooleanField(default=False)),
                ('file_storage', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Data',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entity_name', models.CharField(max_length=100)),
                ('entity_value', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name_plural': 'debug - Data',
                'verbose_name': 'debug - Data',
            },
        ),
        migrations.CreateModel(
            name='DataValidators',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('function', models.TextField(blank=True, default='', null=True)),
            ],
            options={
                'verbose_name_plural': 'dev - Data Validators',
                'verbose_name': 'dev - Data Validators',
            },
        ),
        migrations.CreateModel(
            name='Entities',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entity_name', models.TextField()),
                ('keywords', models.TextField(blank=True, default='', help_text='The keywords sets should be comma separated and the keywords should be space separated')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='engine.Entities')),
            ],
            options={
                'verbose_name_plural': 'dev - Entities',
                'verbose_name': 'dev - Entity',
            },
        ),
        migrations.CreateModel(
            name='EntityGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('is_clickable', models.BooleanField(default=True)),
                ('is_typable', models.BooleanField(default=False)),
                ('is_primary', models.BooleanField(default=False)),
                ('is_persistent', models.BooleanField(default=False)),
                ('choices', models.ManyToManyField(blank=True, related_name='entity_choices', to='engine.Entities')),
            ],
            options={
                'verbose_name_plural': 'dev - EntityGroup',
                'verbose_name': 'dev - EntityGroup',
            },
        ),
        migrations.CreateModel(
            name='FAQModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.CharField(blank=True, max_length=100, null=True)),
                ('answer', models.CharField(blank=True, max_length=100, null=True)),
                ('date', models.DateField(auto_now=True)),
                ('faq_status', models.CharField(blank=True, choices=[('Added', 'Added'), ('Not added', 'Not added')], default='Not added', max_length=20, null=True)),
            ],
            options={
                'verbose_name_plural': 'help - FAQs',
                'verbose_name': 'help - FAQ',
            },
        ),
        migrations.CreateModel(
            name='Files',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_name', models.CharField(blank=True, max_length=100, null=True)),
                ('file', models.FileField(upload_to='files/')),
            ],
            options={
                'verbose_name_plural': 'file - Files',
                'verbose_name': 'file - Files',
            },
        ),
        migrations.CreateModel(
            name='Intent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('keywords', models.TextField(default='', help_text='The keywords sets should be comma separated and the keywords should be space separated')),
                ('restricted_keywords', models.TextField(blank=True, default='', help_text='The keywords sets should be comma separated and the keywords should be space separated', null=True)),
                ('answer', ckeditor.fields.RichTextField(blank=True, null=True)),
                ('level', models.IntegerField(default=1)),
            ],
            options={
                'verbose_name_plural': 'dev - Intents',
                'verbose_name': 'dev - Intent',
            },
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='eng', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Leads',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('zip_code', models.CharField(blank=True, max_length=100, null=True)),
                ('mob_no', models.CharField(blank=True, max_length=100, null=True)),
                ('date', models.DateField(auto_now=True)),
                ('is_exported', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name_plural': 'help - Leads',
                'verbose_name': 'help - Leads',
            },
        ),
        migrations.CreateModel(
            name='Log',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('query', models.CharField(blank=True, max_length=100, null=True)),
                ('time', models.DateTimeField(auto_now_add=True)),
                ('answer_succesfull', models.BooleanField(default=False)),
                ('chatbot_answer', models.CharField(blank=True, max_length=100, null=True)),
                ('clicked', models.BooleanField(default=False)),
                ('channel', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='engine.Channel')),
                ('language', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='engine.Language')),
            ],
            options={
                'verbose_name_plural': 'debug - Logs',
                'verbose_name': 'debug - Log',
            },
        ),
        migrations.CreateModel(
            name='Mapper',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('entity', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='engine.Entities')),
            ],
            options={
                'verbose_name_plural': 'Mappers',
                'verbose_name': 'Mapper',
            },
        ),
        migrations.CreateModel(
            name='ProductModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product_name', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'verbose_name_plural': 'Help - Products',
                'verbose_name': 'Help - Product',
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.CharField(max_length=500, null=True)),
                ('current_query', models.CharField(blank=True, max_length=100, null=True)),
                ('stage', models.TextField(blank=True, default='pre', null=True)),
                ('current_entity', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='engine.Entities')),
                ('current_intent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='engine.Intent')),
            ],
            options={
                'verbose_name_plural': 'debug - Profile',
                'verbose_name': 'debug - Profile',
            },
        ),
        migrations.CreateModel(
            name='QueryCnt',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('query', models.CharField(max_length=100)),
                ('count', models.IntegerField(default=0)),
                ('channel', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='engine.Channel')),
                ('language', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='engine.Language')),
            ],
        ),
        migrations.CreateModel(
            name='QueryFeedbackCounter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('like_cnt', models.IntegerField(default=0)),
                ('dislike_cnt', models.IntegerField(default=0)),
                ('query', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='engine.QueryCnt')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='engine.Profile')),
            ],
            options={
                'verbose_name_plural': 'debug - Query Feedback',
                'verbose_name': 'debug - Query Feedback',
            },
        ),
        migrations.CreateModel(
            name='QuestionsEntityGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(blank=True, null=True)),
                ('entity_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='engine.EntityGroup')),
            ],
            options={
                'verbose_name_plural': 'dev - QuestionEntityGroup',
                'verbose_name': 'dev - QuestionEntityGroup',
            },
        ),
        migrations.CreateModel(
            name='Recommendation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('query', models.CharField(max_length=100)),
                ('entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='engine.Entities')),
                ('intent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='engine.Intent')),
            ],
            options={
                'verbose_name_plural': 'dev - Recommendations',
                'verbose_name': 'dev - Recommendation',
            },
        ),
        migrations.CreateModel(
            name='Sentences',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sentence', ckeditor.fields.RichTextField()),
                ('channel', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='engine.Channel')),
                ('file', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='engine.Files')),
                ('language', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='engine.Language')),
            ],
            options={
                'verbose_name_plural': 'dev - Sentences',
                'ordering': ('-pk',),
                'verbose_name': 'dev - Sentences',
            },
        ),
        migrations.CreateModel(
            name='Tree',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(blank=True, null=True)),
                ('is_diversify', models.BooleanField(default=False)),
                ('is_tree_mapper_create', models.BooleanField(default=True)),
                ('is_fixed', models.BooleanField(default=False)),
                ('answer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tree_answer', to='engine.ChannelSentences')),
                ('mapper', models.ManyToManyField(blank=True, related_name='mappers', to='engine.Mapper')),
                ('question_entity_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='engine.QuestionsEntityGroup')),
            ],
            options={
                'verbose_name_plural': 'dev - Tree',
                'verbose_name': 'dev - Tree',
            },
        ),
        migrations.CreateModel(
            name='UniqueUsers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.CharField(max_length=100)),
                ('time', models.DateField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Variables',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('variable_name', models.TextField()),
                ('variable_value', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='WordMapper',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('keyword', models.CharField(blank=True, default='', max_length=100, null=True, unique=True)),
                ('similar_words', models.TextField(default='')),
            ],
            options={
                'verbose_name_plural': 'dev - WordMappers',
                'verbose_name': 'dev - WordMapper',
            },
        ),
        migrations.AddField(
            model_name='questionsentitygroup',
            name='question',
            field=models.ForeignKey(blank=True, help_text='This is the question to be asked in the flow.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='question_entitytype', to='engine.Sentences'),
        ),
        migrations.AddField(
            model_name='profile',
            name='tree',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='engine.Tree'),
        ),
        migrations.AddField(
            model_name='mapper',
            name='next_tree',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tree_mapper', to='engine.Tree'),
        ),
        migrations.AddField(
            model_name='log',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Profile2', to='engine.Profile'),
        ),
        migrations.AddField(
            model_name='leads',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='engine.ProductModel'),
        ),
        migrations.AddField(
            model_name='intent',
            name='tree',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='intent_set', to='engine.Tree'),
        ),
        migrations.AddField(
            model_name='faqmodel',
            name='product',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='engine.ProductModel'),
        ),
        migrations.AddField(
            model_name='datavalidators',
            name='entity_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='engine.EntityGroup'),
        ),
        migrations.AddField(
            model_name='data',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='engine.Profile'),
        ),
        migrations.AddField(
            model_name='channelsentences',
            name='group_of_sentences',
            field=models.ManyToManyField(blank=True, to='engine.Sentences'),
        ),
        migrations.AddField(
            model_name='analytics',
            name='entity',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='engine.Entities'),
        ),
        migrations.AddField(
            model_name='analytics',
            name='intent',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='engine.Intent'),
        ),
    ]
